#pragma once
#include "Graphics/Device.h"

namespace rv
{
	enum ShaderType
	{
		RV_ST_NULL,
		RV_ST_VERTEX = VK_SHADER_STAGE_VERTEX_BIT,
		RV_ST_TESSELLATION_CONTROL, VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT,
		RV_ST_TESSELLATION_EVALUATION_BIT, VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT,
		RV_ST_GEOMETRY = VK_SHADER_STAGE_GEOMETRY_BIT,
		RV_ST_FRAGMENT = VK_SHADER_STAGE_FRAGMENT_BIT,
		RV_ST_COMPUTE = VK_SHADER_STAGE_COMPUTE_BIT,
		RV_ST_ALL_GRAPHICS = VK_SHADER_STAGE_ALL_GRAPHICS,
		RV_ST_ALL = VK_SHADER_STAGE_ALL,
		RV_ST_RAYGEN_KHR = VK_SHADER_STAGE_RAYGEN_BIT_KHR,
		RV_ST_ANY_HIT_KHR = VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
		RV_ST_CLOSEST_HIT_KHR = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
		RV_ST_MISS_KHR = VK_SHADER_STAGE_MISS_BIT_KHR,
		RV_ST_INTERSECTION_KHR = VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
		RV_ST_CALLABLE_KHR = VK_SHADER_STAGE_CALLABLE_BIT_KHR,
		RV_ST_TASK_NV = VK_SHADER_STAGE_TASK_BIT_NV,
		RV_ST_MESH_NV = VK_SHADER_STAGE_MESH_BIT_NV,
		RV_ST_SUBPASS_SHADING_HUAWEI, VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI,
		RV_ST_RAYGEN_NV = VK_SHADER_STAGE_RAYGEN_BIT_NV,
		RV_ST_ANY_HIT_NV = VK_SHADER_STAGE_ANY_HIT_BIT_NV,
		RV_ST_CLOSEST_HIT_NV = VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV,
		RV_ST_MISS_NV = VK_SHADER_STAGE_MISS_BIT_NV,
		RV_ST_INTERSECTION_NV = VK_SHADER_STAGE_INTERSECTION_BIT_NV,
		RV_ST_CALLABLE_NV = VK_SHADER_STAGE_CALLABLE_BIT_NV,
	};

	struct Shader
	{
		Shader() = default;
		Shader(Device& device, const char* filename, const ShaderType& type = RV_ST_NULL);
		Shader(const Shader&) = delete;
		Shader(Shader&& rhs) noexcept;
		~Shader();

		VkPipelineShaderStageCreateInfo PipelineStage() const;

		Shader& operator= (const Shader&) = delete;
		Shader& operator= (Shader&& rhs) noexcept;

		void Release();

		VkShaderModule shader = VK_NULL_HANDLE;
		ShaderType type = RV_ST_NULL;
	};
}